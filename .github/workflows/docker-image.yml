name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Generar versión basada en los commits
    - name: Git Semantic Version
      uses: PaulHatch/semantic-version@v4.0.3
      with:
        major_pattern: "major:"
        minor_pattern: "feat:"
        format: "${major}.${minor}.${patch}-prerelease${increment}"
      id: version

    # Configurar variables de entorno desde secrets
    - name: Configurar variables de entorno
      run: |
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
        echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV

    - name: Instalar dependencias
      run: npm install

    - name: Ejecutar pruebas
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}
        PORT: ${{ secrets.PORT }}
      run: npm test

    - name: Docker Login
      if: success()
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin

    # Construcción y push de la imagen con versión
    - name: Build and Push Docker Image
      if: success()
      env:
        NEW_VERSION: ${{ steps.version.outputs.version }}
      run: |
        docker build -t tgelias/gha-user-api:$NEW_VERSION .
        docker build -t tgelias/gha-user-api:latest .
        docker push tgelias/gha-user-api:$NEW_VERSION
        docker push tgelias/gha-user-api:latest
