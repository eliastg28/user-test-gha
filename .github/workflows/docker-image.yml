name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üöÄ Clonar el c√≥digo
      uses: actions/checkout@v3

    - name: üõ† Configurar variables de entorno
      run: |
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
        echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV

    - name: üîç Mostrar valores de las variables de entorno
      run: |
        echo "DB_HOST=$DB_HOST"
        echo "DB_USER=$DB_USER"
        echo "DB_NAME=$DB_NAME"
        echo "DB_PORT=$DB_PORT"
        echo "PORT=$PORT"
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}
        PORT: ${{ secrets.PORT }}

    - name: üîå Probar conexi√≥n con MySQL
      run: |
        sudo apt-get install -y mysql-client
        echo "Conectando a MySQL..."
        mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" -e "SHOW DATABASES;"
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}

    - name: üì¶ Instalar dependencias
      run: npm install

    - name: üß™ Ejecutar pruebas con Jest
      run: npm test
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}
        PORT: ${{ secrets.PORT }}

    - name: üîë Docker Login
      if: success()
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin

    - name: üèó Build y Push de la imagen Docker
      if: success()
      run: |
        docker build -t tgelias/gha-user-api:latest .
        docker push tgelias/gha-user-api:latest
